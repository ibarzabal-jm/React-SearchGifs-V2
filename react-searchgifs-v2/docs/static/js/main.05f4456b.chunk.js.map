{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","PrincipalApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categorias","console","log","type","value","onChange","target","propType","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","PrincipalApp","categories","ReactDOM","render","document","getElementById"],"mappings":"gPAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAuBhD,OACI,oCACI,wEACA,0BAAMC,SAlBO,SAAEC,GAEnBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,GAE3BR,GAAe,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC7CN,EAAc,KAGdO,QAAQC,IAAI,+BASR,2BACIC,KAAO,OACPC,MAASX,EACTY,SA1BU,SAAET,GACxBF,EAAeE,EAAEU,OAAOF,aAmChCd,EAAYiB,SAAW,CACnBhB,c,OAAeiB,EAAUC,KAAKC,Y,2BC3CrBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DAEJ,mCACXC,EAAM,uCACS,EAInBA,GAAG,mBANY,mCAMZ,cAA4BC,UAAUH,GAAtC,kBAJgB,GAJA,SAUAI,MAAMF,GAVN,cAUbG,EAVa,gBAWEA,EAAKC,OAXP,uBAWZC,EAXY,EAWZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAE1B,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAlBvB,kBAuBZM,GAvBY,4CAAH,sDCCPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAIrC,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCHHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAAEA,GAAe,IAAD,EAEdpB,mBAAS,CAC/B2B,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAuBxC,OAhBAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GAEHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAACpB,IAKGqB,EDnB0BK,CAAc1B,GAAlCa,EAFwB,EAE7BN,KAAaa,EAFgB,EAEhBA,QAErB,OACI,oCACI,wBAAIJ,UAAU,qCAAd,IAAqDhB,EAArD,KAEEoB,GAAW,uBAAGJ,UAAU,oCAAb,WAEb,yBAAKA,UAAU,aAGPH,EAAOJ,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACIiB,IAAMjB,EAAIC,IACLD,UElBpBkB,EAAe,WAAO,IAAD,EAIMhD,mBAAS,CAAC,oBAJhB,mBAIvBiD,EAJuB,KAIXlD,EAJW,KAM9B,OACI,oCACI,+CACA,6BACA,kBAAC,EAAD,CAAaA,cAAiBA,IAC9B,6BAGA,4BAEQkD,EAAWpB,KAAK,SAAAT,GAAQ,OAEpB,kBAAC,EAAD,CACIA,SAAUA,EACV2B,IAAK3B,U,MCfjC8B,IAASC,OAEL,kBAAC,EAAD,MACFC,SAASC,eAAe,W","file":"static/js/main.05f4456b.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n    \r\n    const [inputValue, setInputValue] = useState(''); \r\n    \r\n    const handleInputChange = ( e ) =>{\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = ( e ) => {\r\n        \r\n        e.preventDefault();\r\n\r\n        if( inputValue.trim().length > 2){\r\n\r\n            setCategories( categorias => [inputValue, ...categorias ] );\r\n            setInputValue('');\r\n        }else{\r\n            \r\n            console.log('Categor√≠as no agregada')\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h4>Ingresa aqui abajo lo que quieras buscar</h4>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type = \"text\"\r\n                    value = {inputValue}\r\n                    onChange={ handleInputChange }\r\n    \r\n                />\r\n\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propType = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n","\r\nexport const getGifs = async( category ) =>{\r\n        \r\n    const apikey = 'A7zQQ6CwBCsNg3qwSu2rvcL5nBnOcnCU';\r\n    let url = 'https://api.giphy.com/v1/gifs/search';\r\n    let cantidadGifs = 5;\r\n    \r\n\r\n    \r\n    url += `?api_key=${apikey}&q=${encodeURI(category)}&limit=${cantidadGifs}`;\r\n    \r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url,\r\n        }\r\n\r\n    })\r\n\r\n    return gifs;\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n\r\n    \r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__rollIn\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n","\r\n\r\nimport React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__shakeY\"> { category } </h3>\r\n\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n\r\n            <div className=\"card-grid\">\r\n                \r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                            key={ img.id }\r\n                            { ...img }\r\n                        />\r\n                    ))\r\n                }\r\n            \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n/* import React,{useState, useEffect} from 'react'\r\n// import PropTypes from 'prop-types'\r\n\r\nimport { GifGridItem } from './GifGridItem'\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n\r\n    const [images, setImages] = useState([])    \r\n    \r\n\r\n    useEffect( () =>{\r\n        // getGifs( category ).then(imgs => setImages( imgs ) )\r\n        getGifs( category ).then( setImages )\r\n    }, [ category ])\r\n    \r\n\r\n\r\n\r\n\r\n    return (\r\n        \r\n        <>\r\n            <h3>{category}</h3>\r\n\r\n            \r\n            <div className=\"card-grid\">\r\n    \r\n                {\r\n                    images.map( img => (  \r\n                        <GifGridItem \r\n                        key={img.id}\r\n                        { ...img }\r\n                        />\r\n                    ))\r\n                }\r\n    \r\n            \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n// GifGrid.propTypes = {\r\n//     category: PropTypes.string.isRequired,\r\n// }\r\n\r\nexport default GifGrid\r\n */\r\n\r\n","import { useState, useEffect } from 'react'\nimport { getGifs } from '../helpers/getGifs';\n\n\nexport const useFetchGifs = ( category ) => {\n    \n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n\n        getGifs( category )\n            .then( imgs => {\n                \n                setState({\n                    data: imgs,\n                    loading: false\n                });\n            })\n\n    }, [category])\n\n\n\n\n    return state;\n\n\n}\n\n\n","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport {GifGrid} from './components/GifGrid';\r\n\r\nexport const PrincipalApp = () => {\r\n\r\n   \r\n    \r\n    const [categories, setCategories] = useState(['Hunter x Hunter']);\r\n\r\n    return (\r\n        <>\r\n            <h1> SearchGifs V2 </h1>\r\n            <br />\r\n            <AddCategory setCategories = {setCategories} />\r\n            <hr />\r\n\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => \r\n\r\n                        <GifGrid \r\n                            category={category}\r\n                            key={category}\r\n                            \r\n                        />\r\n\r\n                    )\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport {PrincipalApp}  from './PrincipalApp';\r\n\r\nimport './index.css';\r\n\r\n\r\n\r\nReactDOM.render(\r\n\r\n    <PrincipalApp />,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}